// Code generated by mockery v2.14.1. DO NOT EDIT.

package post

import (
	entity "posterr/database/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PostServiceInterface is an autogenerated mock type for the PostServiceInterface type
type PostServiceInterface struct {
	mock.Mock
}

// Index provides a mock function with given fields: userUuid, owner, page, pageSize, startDateFormated, endDateFormated
func (_m *PostServiceInterface) Index(userUuid string, owner string, page uint64, pageSize uint64, startDateFormated *time.Time, endDateFormated *time.Time) ([]entity.Post, error) {
	ret := _m.Called(userUuid, owner, page, pageSize, startDateFormated, endDateFormated)

	var r0 []entity.Post
	if rf, ok := ret.Get(0).(func(string, string, uint64, uint64, *time.Time, *time.Time) []entity.Post); ok {
		r0 = rf(userUuid, owner, page, pageSize, startDateFormated, endDateFormated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint64, uint64, *time.Time, *time.Time) error); ok {
		r1 = rf(userUuid, owner, page, pageSize, startDateFormated, endDateFormated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: userUuid, content, repost, quotePost
func (_m *PostServiceInterface) Insert(userUuid string, content string, repost uint64, quotePost uint64) error {
	ret := _m.Called(userUuid, content, repost, quotePost)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, uint64, uint64) error); ok {
		r0 = rf(userUuid, content, repost, quotePost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPostServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostServiceInterface creates a new instance of PostServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostServiceInterface(t mockConstructorTestingTNewPostServiceInterface) *PostServiceInterface {
	mock := &PostServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
