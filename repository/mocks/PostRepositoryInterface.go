// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	entity "posterr/database/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PostRepositoryInterface is an autogenerated mock type for the PostRepositoryInterface type
type PostRepositoryInterface struct {
	mock.Mock
}

// CheckUniqueQuotes provides a mock function with given fields: postID
func (_m *PostRepositoryInterface) CheckUniqueQuotes(postID uint64) bool {
	ret := _m.Called(postID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(postID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckUniqueRepost provides a mock function with given fields: postID
func (_m *PostRepositoryInterface) CheckUniqueRepost(postID uint64) bool {
	ret := _m.Called(postID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(postID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CountUserTotalPosts provides a mock function with given fields: userID
func (_m *PostRepositoryInterface) CountUserTotalPosts(userID uint64) uint64 {
	ret := _m.Called(userID)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// CurrentDayTotalPosts provides a mock function with given fields: userID
func (_m *PostRepositoryInterface) CurrentDayTotalPosts(userID uint64) int64 {
	ret := _m.Called(userID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Find provides a mock function with given fields: postID
func (_m *PostRepositoryInterface) Find(postID uint64) *entity.Post {
	ret := _m.Called(postID)

	var r0 *entity.Post
	if rf, ok := ret.Get(0).(func(uint64) *entity.Post); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Post)
		}
	}

	return r0
}

// Get provides a mock function with given fields: userID, owner, page, pageSize, startDateFormated, endDateFormated
func (_m *PostRepositoryInterface) Get(userID uint64, owner string, page uint64, pageSize uint64, startDateFormated *time.Time, endDateFormated *time.Time) []entity.Post {
	ret := _m.Called(userID, owner, page, pageSize, startDateFormated, endDateFormated)

	var r0 []entity.Post
	if rf, ok := ret.Get(0).(func(uint64, string, uint64, uint64, *time.Time, *time.Time) []entity.Post); ok {
		r0 = rf(userID, owner, page, pageSize, startDateFormated, endDateFormated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Post)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: post
func (_m *PostRepositoryInterface) Insert(post entity.Post) error {
	ret := _m.Called(post)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Post) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPostRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostRepositoryInterface creates a new instance of PostRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostRepositoryInterface(t mockConstructorTestingTNewPostRepositoryInterface) *PostRepositoryInterface {
	mock := &PostRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
